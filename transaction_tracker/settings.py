"""
Django settings for transaction_tracker project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is the root directory of our Django project.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This is a unique key used for security purposes (e.g., session management).
# We get it from environment variables for security.
SECRET_KEY = os.getenv('SECRET_KEY', 'your-super-secret-key-for-dev')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# ALLOWED_HOSTS is a list of strings representing the host/domain names
# that this Django site can serve. This is a security measure to prevent
# HTTP Host header attacks. When DEBUG is False, this must be set.
# For Docker, we allow all hosts for simplicity in development.
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']


# Application definition

# INSTALLED_APPS lists all Django applications that are active in this project.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Django Rest Framework for API endpoints
    'MoneyTrail',     # Our Custom App
]

# MIDDLEWARE is a list of components that process requests and responses.
# They perform functions like security, session management, etc.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ROOT_URLCONF specifies the Python module where Django looks for the root URL patterns.
ROOT_URLCONF = 'transaction_tracker.urls'

# TEMPLATES defines how Django finds and renders templates.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS tells Django where to look for templates.
        # We're telling it to look in a 'templates' folder at the project root.
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True, # Also look for templates inside each app's 'templates' folder
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION is the entry point for WSGI-compatible web servers.
WSGI_APPLICATION = 'transaction_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES defines the database connections.
# We're configuring PostgreSQL here, using environment variables for sensitive details.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Specifies PostgreSQL as the database engine
        'NAME': os.getenv('POSTGRES_DB', 'money_trail_db'), # Database name
        'USER': os.getenv('POSTGRES_USER', 'user'), # Database user
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'password'), # Database password
        'HOST': os.getenv('POSTGRES_HOST', 'db'), # Database host (service name in docker-compose)
        'PORT': os.getenv('POSTGRES_PORT', '5432'), # Database port
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_TZ = True
TIME_ZONE = 'UTC'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# This is the URL prefix for static files.
# When Django serves static files (in development) or when a web server
# serves them (in production), this URL is used to access them.
STATIC_URL = 'static/'

# This is the absolute path to the directory where Django's
# `collectstatic` management command will gather all static files from your
# apps and any directories listed in `STATICFILES_DIRS`.
# This directory is typically used by a production web server (like Nginx)
# to serve static assets efficiently. It should NOT be under version control.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# This is a list of additional locations where Django's
# `staticfiles` app will look for static files. These are typically for
# global static assets that are not tied to a specific app (e.g., a project-wide
# CSS file, favicon, or general images).
#
# IMPORTANT: Django automatically looks for a 'static/' subdirectory within
# each of your INSTALLED_APPS. So, for files like `MoneyTrail/static/MoneyTrail/css/style.css`,
# you do NOT need to add `MoneyTrail/static/` here.
#
# We are setting it to an empty list because all our custom static files
# are located within the 'static/' directory of the 'MoneyTrail' app,
# which Django discovers automatically. If you had a project-level 'static'
# folder (e.g., `moneytrail_project/static/`), you would add it like:
# STATICFILES_DIRS = [BASE_DIR / 'static']
STATICFILES_DIRS = []


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
# This is a basic configuration for DRF.
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny', # Allows anyone to access the API for now
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10 # Number of items per page in API listings
}
