import pytz
from decimal import Decimal
from django.test import TestCase
from django.utils import timezone
from MoneyTrail.models import Transaction

class TransactionModelTest(TestCase):
    def setUp(self):
        # Create transaction for testing.
        # The 'id' will be auto-generated by Django.
        self.transaction = Transaction.objects.create(
            description='Test Transaction',
            amount=Decimal('100.00'),
            type='deposit',
            created_at=timezone.datetime(2025, 1, 1, 10, 0, 0, tzinfo=pytz.utc)
        )

    def test_transaction_creation(self):
        self.assertEqual(self.transaction.description, 'Test Transaction')
        self.assertEqual(self.transaction.amount, Decimal('100.00'))
        self.assertEqual(self.transaction.type, 'deposit')
        self.assertEqual(self.transaction.created_at, timezone.datetime(2025, 1, 1, 10, 0, 0, tzinfo=pytz.utc))
        # Check that the ID exists and the __str__ method generates the TRN-XXXX format
        self.assertTrue(self.transaction.id is not None)
        self.assertRegex(str(self.transaction), r'TRN-\d{4}')

    def test_amount_decimal_type(self):
        self.assertIsInstance(self.transaction.amount, Decimal)

    def test_transaction_type_choices(self):
        deposit_trans = Transaction.objects.create(
            description='Another Deposit',
            amount=Decimal('50.00'),
            type='deposit',
            created_at=timezone.datetime(2025, 1, 2, tzinfo=pytz.utc)
        )
        expense_trans = Transaction.objects.create(
            description='Another Expense',
            amount=Decimal('20.00'),
            type='expense',
            created_at=timezone.datetime(2025, 1, 3, tzinfo=pytz.utc)
        )
        self.assertEqual(deposit_trans.type, 'deposit')
        self.assertEqual(expense_trans.type, 'expense')

        # Test invalid type (should raise ValueError or IntegrityError depending on DB)
        with self.assertRaises((ValueError, Exception)):
            Transaction.objects.create(
                description='Invalid Type',
                amount=Decimal('10.00'),
                type='invalid_type',
                created_at=timezone.datetime(2025, 1, 4, tzinfo=pytz.utc)
            )

    def test_created_at_default(self):
        new_trans = Transaction.objects.create(
            description='Default Date',
            amount=Decimal('50.00'),
            type='deposit'
        )
        self.assertIsNotNone(new_trans.created_at)
        self.assertTrue(timezone.is_aware(new_trans.created_at))

    def test_transaction_str_representation(self):
        # The __str__ method in your models.py uses self.id directly.
        expected_str = f"TRN-{self.transaction.id:04d} - {self.transaction.type.capitalize()}: {self.transaction.amount} on {self.transaction.created_at.strftime('%Y-%m-%d')}"
        self.assertEqual(str(self.transaction), expected_str)

    def test_default_ordering(self):
        # Create transactions with different dates to test ordering
        Transaction.objects.create(
            description='Older',
            amount=Decimal('10.00'),
            type='expense',
            created_at=timezone.datetime(2024, 12, 31, 23, 59, 59, tzinfo=pytz.utc)
        )
        Transaction.objects.create(
            description='Newer',
            amount=Decimal('20.00'),
            type='deposit',
            created_at=timezone.datetime(2025, 1, 5, 0, 0, 1, tzinfo=pytz.utc)
        )

        # Default ordering in Meta is ['-created_at'], which means descending (newest first).
        transactions = Transaction.objects.all() # This will already be ordered newest to oldest

        # The order should be: Newer, self.transaction, Older
        # Get descriptions to compare easily
        descriptions_in_order = [t.description for t in transactions]
        self.assertEqual(descriptions_in_order, ['Newer', 'Test Transaction', 'Older'])


    def test_api_external_id_field(self):
        api_trans = Transaction.objects.create(
            description='From API',
            amount=Decimal('99.99'),
            type='deposit',
            api_external_id='123', # This is the field to set for API transactions
            created_at=timezone.datetime(2025, 2, 1, tzinfo=pytz.utc)
        )
        self.assertEqual(api_trans.api_external_id, '123')
        # Check that the __str__ method output contains the TRN-ID format
        self.assertIn(f'TRN-{api_trans.id:04d}', str(api_trans))


    def test_api_external_id_uniqueness(self):
        Transaction.objects.create(
            description='API Test 1',
            amount=Decimal('10.00'),
            type='deposit',
            api_external_id='EX-001',
            created_at=timezone.datetime(2025, 3, 1, tzinfo=pytz.utc)
        )
        with self.assertRaises(Exception): # Using a general Exception as IntegrityError can be wrapped
            Transaction.objects.create(
                description='API Test 2',
                amount=Decimal('20.00'),
                type='expense',
                api_external_id='EX-001', # Duplicate external ID
                created_at=timezone.datetime(2025, 3, 2, tzinfo=pytz.utc)
            )

